# ============================================================================
# Pull Request Checks - CI Pipeline
# ============================================================================
# This workflow runs on every pull request to validate code quality,
# run tests, and ensure the build succeeds before merging.
# ============================================================================

name: PR Checks

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NPM_VERSION: '10'

jobs:
  # ============================================================================
  # Job 1: Lint and Type Check
  # ============================================================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier format check
        run: npm run format:check
        continue-on-error: false

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: false

      - name: Comment on PR (if linting fails)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Linting or Type Checking Failed**\n\nPlease fix the issues and push again.\n\nRun locally:\n```bash\nnpm run lint\nnpm run type-check\n```'
            })

  # ============================================================================
  # Job 2: Unit Tests
  # ============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:unit:coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # ============================================================================
  # Job 3: Integration Tests
  # ============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Use Supabase test instance
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
      NEXT_PUBLIC_SITE_URL: http://localhost:5040
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: false

  # ============================================================================
  # Job 4: E2E Tests with Playwright
  # ============================================================================
  test-e2e:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: http://localhost:5040

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: http://localhost:5040

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

  # ============================================================================
  # Job 5: Build Verification
  # ============================================================================
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: https://preview.humanglue.ai
          NODE_ENV: production

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed: .next directory not found"
            exit 1
          fi
          echo "Build successful"

      - name: Analyze bundle size
        run: |
          npm run analyze || echo "Bundle analysis skipped (requires webpack-bundle-analyzer)"
        continue-on-error: true

  # ============================================================================
  # Job 6: Security Audit
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --production --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ============================================================================
  # Job 7: Comment PR with Results
  # ============================================================================
  comment-results:
    name: Comment PR Results
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, test-e2e, build, security]
    if: always()

    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintStatus = '${{ needs.lint.result }}';
            const testUnitStatus = '${{ needs.test-unit.result }}';
            const testIntegrationStatus = '${{ needs.test-integration.result }}';
            const testE2eStatus = '${{ needs.test-e2e.result }}';
            const buildStatus = '${{ needs.build.result }}';
            const securityStatus = '${{ needs.security.result }}';

            const getEmoji = (status) => {
              if (status === 'success') return '✅';
              if (status === 'failure') return '❌';
              return '⚠️';
            };

            const body = `## PR Checks Results

            | Check | Status |
            |-------|--------|
            | Lint & Type Check | ${getEmoji(lintStatus)} ${lintStatus} |
            | Unit Tests | ${getEmoji(testUnitStatus)} ${testUnitStatus} |
            | Integration Tests | ${getEmoji(testIntegrationStatus)} ${testIntegrationStatus} |
            | E2E Tests | ${getEmoji(testE2eStatus)} ${testE2eStatus} |
            | Build | ${getEmoji(buildStatus)} ${buildStatus} |
            | Security | ${getEmoji(securityStatus)} ${securityStatus} |

            ${lintStatus === 'success' && testUnitStatus === 'success' && buildStatus === 'success' ? '🎉 **All checks passed!** This PR is ready for review.' : '⚠️ **Some checks failed.** Please review the errors above.'}

            ---
            *Triggered by: ${{ github.actor }}*
            *Commit: ${{ github.sha }}*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
